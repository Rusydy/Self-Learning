Let us begin with an example:

Take a number: 56789. Rotate left, you get 67895.

Keep the first digit in place and rotate left the other digits: 68957.

Keep the first two digits in place and rotate the other ones: 68579.

Keep the first three digits and rotate left the rest: 68597. Now it is over since keeping the first four it remains only one digit which rotated is itself.

You have the following sequence of numbers:

56789 -> 67895 -> 68957 -> 68579 -> 68597

and you must return the greatest: 68957.
Task

Write function max_rot(n) which given a positive integer n returns the maximum number you got doing rotations similar to the above example.

So max_rot (or maxRot or ... depending on the language) is such as:

    max_rot(56789) should return 68957

    max_rot(38458215) should return 85821534

-- In other words

the number 56789, we'll have:

    67895 (6 stays in place, 7 gets rotated to the back)

    68957 (6 and 8 stay in place, 9 gets rotated to the back)

    68579 (6, 8, and 5 stay in place, 7 gets rotated to the back)

    68597 (6, 8, 5, and 9 stay in place - no more rotations can occur)

Then return the max from these values - 68957.

Trying to solve this Codewars challenge.

Given a number, we are keeping track of the different (left) rotation results and returning the greatest result.

However, this rotate is different from a typical rotate - because n number of digits will stay static after being rotated, and n increases with each rotate.